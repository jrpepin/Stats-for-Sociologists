---
title: "Introduction to Data"
format:
  revealjs:
    multiplex: false
    controls: true
    theme: [default, custom.scss]
    highlight-style: atom-one
    include-in-header:
    - file: mathjax-color.html
    slide-number: c
    math: mathjax
    code-annotations: hover
revealjs-plugins:
  - quiz
embed-resources: true
filters:
    - openlinksinnewpage
editor: 
  markdown: 
    wrap: 72
execute: 
  echo: true
---

```{r echo=FALSE}

#| label: setup
#| message: false
#| include: false

## Load packages, custom functions, and styles
source("custom-setup-styles.R")

# Color in math equations
# https://egallic.fr/Recherche/aide-memoire/quarto_equation_colors.html#colors-in-equations-with-revealjs
```

# Agenda {data-menu-title="Agenda" background-image="images/calendar.png" background-size="100px" background-repeat="repeat"}

-   Data Management I
-   Frequency Distributions

# Learning objectives

By the end of the lab, you will be able to ...

-   implement basic variable manipulation
-   create useful frequency tables

# Code-along 02 {.theme-section}

Download and open [code-along-02.qmd]()

## Packages

Load the standard packages.

```{r}
#| message: false
#| label: load

library(here)
library(tidyverse)
library(gssr)
library(gssrdoc)
```

<br>

Install and load the
[`summarytools`](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html)
package.

```{r}
#| message: false
#| label: install
#| eval: false

install.packages("summarytools")
```

<br>

```{r}
#| message: false
#| label: summarytools

library(summarytools)
```

## Load your data & codebook

```{r}
#| message: false
#| label: gssdata

# Get the data only for the 2024 survey respondents
gss24 <- gss_get_yr(2024)

# Load the codebook
data(gss_dict)

```

# Data Management I {.theme-section}

## where I left off:

**dplyr**
https://jaspertjaden.github.io/course-intro2r/week3.html
https://statsandr.com/blog/introduction-to-data-manipulation-in-r-with-dplyr/

**operators**
https://www.geeksforgeeks.org/r-language/r-operators/
https://www.datacamp.com/doc/r/operators
https://www.codecademy.com/resources/docs/r/operators

## Coding basics {.smaller}

::::: columns

::: {.column .fragment}
You can use R to do basic math calculations:

```{r}
#| label: arithmetic 

1 + 2
2 * 5
(1 + 2) / 2
```
:::

::: {.column .fragment}

You can create new objects with the assignment operator <-:
```{r}
#| label: assignment 

x <- 3 * 4
x
```
:::

:::::

::::: columns

::: {.column .fragment}
You can (and should) make comments in your code
```{r}
#| label: comments 

# R will ignore any text after # for that line

# create vector of primes
primes <- c(2, 3, 5, 7, 11, 13)
primes

```
:::

::: {.column .fragment}
Object names must start with a letter and can only contain letters, numbers, _, and .
```{r}
#| label: object-names 
#| eval: false

i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```
:::

:::::


## Operators in R

[Operators in R](https://www.geeksforgeeks.org/r-language/r-operators/) are 
symbols directing R to perform various kinds mathematical, logical, and 
decision operations. A few of the key ones to know before we get started:

To test equality or inequality:  
[**==, !=, >, >=, <, <=**]{style="color: #3498DB"}

To indicate "and", "or", and "not":  
[**& | !**]{style="color: #3498DB"}

Assigning values to various data objects:
[**<- -> =**]{style="color: #3498DB"}



## Logical operators {.smaller}

| operator | definition                                |
|:---------|:------------------------------------------|
| `<`      | [is less than?]{.fragment}                |
| `<=`     | [is less than or equal to?]{.fragment}    |
| `>`      | [is greater than?]{.fragment}             |
| `>=`     | [is greater than or equal to?]{.fragment} |
| `==`     | [is exactly equal to?]{.fragment}         |
| `!=`     | [is not equal to?]{.fragment}             |

: {tbl-colwidths="\[25,75\]"}


## Logical operators (cont.) {.smaller}

Generally useful in a `filter()` but will come up in various other places as well...

| operator      | definition                                                            |
|:--------------|:----------------------------------------------------------------------|
| `x & y`       | [is x AND y?]{.fragment}                                              |
| `x \| y`      | [is x OR y?]{.fragment}                                               |
| `is.na(x)`    | [is x NA?]{.fragment}                                                 |
| `!is.na(x)`   | [is x not NA?]{.fragment}                                             |
| `x %in% y`    | [is x in y?]{.fragment}                                               |
| `!(x %in% y)` | [is x not in y?]{.fragment}                                           |
| `!x`          | [is not x? (only makes sense if `x` is `TRUE` or `FALSE`)]{.fragment} |

: {tbl-colwidths="\[25,75\]"}



## Tidying Data

::: {style="color: #18bc9c; font-size: 150%; font-family: 'Shadows Into Light'"}
Most tasks related to data analysis are not glorious or fancy.  
:::
  
A lot of your time is dedicated to whipping your dataset into the shape that you need to be able to analyze it.  

<br>

This task has different names “data cleaning,” “data management,” “data manipulation,” “data wrangling,” “data transformation.”

::: aside
Source: [Jasper Dag Tjaden](https://jaspertjaden.github.io/course-intro2r/week3.html)
:::

## `dplyr` package {.smaller}

The `dplyr` package provides a complete set of functions that help you solve the most common data manipulation challenges such as:  

-    filtering observations based on their values
-    extracting observations based on their values or positions
-    sampling observations based on a specific number or fraction of rows
-    sorting observations based on one or several variables
-    selecting variables based on their names or positions
-    renaming variables
-    adding new variables based on existing ones
-    summarizing observations or variables to a single descriptive measure
-    performing any operation by group

::: aside
Source: [Antoine Soetewey](https://statsandr.com/blog/introduction-to-data-manipulation-in-r-with-dplyr/)
:::

## function(argument)

Functions are (most often) verbs, followed by what they will be applied
to in parentheses:

<br>

```{r}
#| eval: false
#| message: false
#| label: function

do_this(to_this)
do_that(to_this, to_that, with_those)
```

::: aside
Source: [Dr. Mine Çetinkaya-Rundel](https://sta199-f24.github.io/slides/01-meet-the-toolkit-slides.html#/functionargument)  
:::

## The pipe `|>` 

<br>

The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.

```{r}
sum(1, 2)
```

<br>

. . . 

```{r}
1 |> 
  sum(2)
```


## `dplyr` style  

In data transformation pipelines, always use a  

-   space before `|>` 
-   line break after `|>` 
-   indent the next line of code 
    
::: {.smaller}
We'll talk about data visualization pipes later...
:::

<br>
    
::: {.callout-tip icon="false"}
## {{< fa hat-wizard >}} Heads Up!

|> (native pipe operator) and %>% (magrittr package) behave identically for simple cases.
:::


## `dplyr` grammar

What's the advantage of
[`dplyr`](https://cran.r-project.org/web/packages/dplyr/readme/README.html)
grammar? We can sequence data manipulation!

<br>

```{r}
#| label: descr03
#| code-line-numbers: "1|2|3|4-5|6"

gss24 |> 
  filter(!is.na(sex))  |>
  group_by(sex) |>
  descr(hrs1,
        stats = "common") |> # <1>
  tb() 

```


## `dplyr` basics {.smaller}

`dplyr` verbs (functions) will allow you to solve the vast majority of your data manipulation challenges. They are organized into four groups based on what they operate on: rows, columns, groups, or tables.  

<br>
  
**The verbs all have in common**:  

1.   The first argument is always a data frame. 
2.   The subsequent arguments typically describe which columns to operate on using the variable names (without quotes). 
3.   The output is always a new data frame. 
 
::: aside
Source: [R for Data Science](https://r4ds.hadley.nz/data-transform.html#the-pipe)
:::


## Rows: `filter()`



## The pipe, in action

https://sta199-f24.github.io/slides/03-grammar-of-data-transformation-slides.html#/the-pipe-in-action




## Example `tibble` {.smaller}

Let's make a tiny data frame to use as an example:

```{r}
df <- tibble(x = c(1, 2, 3, 4, 5), y = c("a", "a", "b", "c", "c"))
df
```


::: {.callout-tip icon="false"}
## {{< fa hat-wizard >}} Heads Up!

A [`tibble`](https://r4ds.had.co.nz/tibbles.html) is a modern data frame, often used in the tidyverse and ggplot2 packages.
:::


## Example `tibble` {.smaller}

https://sta199-f24.github.io/slides/06-tidying-data-slides.html#/recap-assignment












## Variables

Remember, you can access the variables (i.e., columns) using the `$` operator, 
as shown using the `table()` function.

<br>

The variable names are case sensitive. 
In this dataset, all variables are lowercase.  

  
```{r}
#| label: fefam-table

table(gss24$fefam)
```

::: {style="color: #E74C3C; font-size: 90%; font-family: 'Shadows Into Light'"}
195 respondents were coded as `2` on this variable. What does that mean? 
:::


## Variable types

classes (character, factor, numeric)

DICHOTOMOUS (aka binary) A variable with only two categories.

NOMINAL
A variable made up of categories that cannot be ordered according to rank.

ORDINAL A variable made up of ranked categories, but there is no systematic and measurable numeric difference between the categories.

INTERVAL-RATIO A variable with categories that are rank-ordered and expressed in the same units.





# Frequency Distributions {.theme-section}

##  {data-menu-title="Think Like a Statistician" background-image="images/lightbulb-solid.png" background-size="80px" background-repeat="repeat"}

Political polarization is high in the U.S. today and attitudes about
gender and family behavior have been heavily debated.

Using the most recent survey, do more liberals than conservatives think
sex before marriage is '*not wrong at all*'?

<br>

[{{< fa regular lightbulb >}} **How do we find
out?**]{style="color: #F39C12; font-size: 175%; font-family: 'Shadows Into Light'"}


## Variable Descriptions

Let's familiarize ourselves with the `premarsx` and `polviews`
variables.

<br>

In the console, type `?premarsx` and hit enter. The Help pane will show
you the question text, response options and values.

<br>

Now, do the same for `polviews`.

## Table

Run this code to see the frequency table for the `premarsx` variable.
Then, add a line below to also see a table for the `polviews` variable.

```{r}
#| label: table-premarsx

table(gss24$premarsx)
```

. . .

<br>

```{r}
#| label: table-polviews

table(gss24$polviews)
```

## Cross-tabs

The table command also let's you create a table with two variables.

```{r}
#| label: crosstab

# 1st variable is the rows, 2nd variable is the columns.
table(gss24$premarsx, gss24$polviews)

```


## Labels

Use
[`haven::as_factor`](https://haven.tidyverse.org/reference/as_factor.html)
to see the value labels instead of the value numbers. Then, do the same
for `polviews`.

```{r}
#| label: label.01-premarsx

table(as_factor(gss24$premarsx))
```

## Labels {.scrollable}

```{r}
#| label: label.01-polviews

table(as_factor(gss24$polviews))
```

## Better Labels {.smaller}

Let's clean up the levels for `premarsx`.

```{r}
#| label: label.02-premarsx
#| code-line-numbers: "1|2|3"
#| output-location: fragment

gss24$premarsx <- zap_missing(gss24$premarsx) # <1>
gss24$premarsx <- as_factor(gss24$premarsx) # <2>
table(gss24$premarsx) 
```

1.  Get rid of all the 'missing' levels (just missing)
2.  Apply the labels instead of numeric values

## Better Labels cont.

Let's get rid of the empty levels in `premarsx`.

```{r}
#| label: label.03-premarsx
#| code-line-numbers: "1|2"
#| output-location: fragment

gss24$premarsx <- droplevels(gss24$premarsx)
table(gss24$premarsx)
```

## Manipulating Variables

For `polviews`, let's combine categories to ease interpretation. This is
easiest when the levels are numeric.

Let's remind ourselves what the values correspond with each label.

```{r}
#| label: levels-polviews-01

table(as_factor(gss24$polviews, levels = "both")) # both shows value and label
```

## Manipulating Variables {.smaller}

```{r}
#| label: levels-polviews-02
#| code-line-numbers: "1|2|3-5|6|7-8|9"


gss24 <- gss24 |> # <1>
 mutate(pol3cat = case_when( # <2>
   polviews >= 1 & polviews <= 3 ~ "Liberal", # <2>
   polviews == 4 ~ "Moderate", # <2>
   polviews >= 5 & polviews <= 7 ~ "Conservative", # <2>
   TRUE ~ NA_character_), # <3>
  pol3cat = factor(pol3cat, # <4>
                 levels = c("Liberal", "Moderate", "Conservative")) # <4>
  )

```

1.  Save over the dataset with an added variable.
2.  Creates a new variable by assigning labels based on values of
    `polviews`
3.  Set everything else to "missing"
4.  Convert the variable to factor with specified level order

<br>

::: {.callout-tip icon="false"}
## {{< fa pen-to-square >}} [Pipes](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/)

can be written as `|>` or `%>%`
:::

## Frequency Table {.smaller}

Always double check your work.

<br>

```{r}
table(gss24$polviews, gss24$pol3cat)
```

## Relative Frequency Table {.smaller}

Make a frequency table. One of `summarytools` main purposes is to help
cleaning and preparing data for further analysis. Pay attention to the
missing values. Then, do the same for `premarsx`.

<br>

```{r}
#| label: freq.01-pol3cat

freq(gss24$pol3cat) 

```

## Relative Frequency Table {.smaller}

```{r}
#| label: freq.01-premarsx

freq(gss24$premarsx) 

```

## Pretty Tables

Using `report.nas = FALSE` suppresses the missing data.\
The `headings = FALSE` parameter suppresses the heading section. Do the
same for `premarsx`.

<br>

```{r}
#| label: freq.02-pol3cat

freq(gss24$pol3cat, report.nas = FALSE, headings = FALSE) 
```

## Pretty Tables

```{r}
#| label: freq.02-premarsx

freq(gss24$premarsx, report.nas = FALSE, headings = FALSE) 
```

##  {.quiz-question data-menu-title="Knowledge Check" background-image="images/clipboard-question.png" background-size="100px" background-repeat="repeat"}

::: {style="color: #F39C12"}
{{< fa clipboard-question >}} Based on your table, what percentage of
respondents believe sex before marriage is 'almost always wrong'?
:::

-   [5.77]{.correct data-explanation="💯 Correct!"}
-   [16.88]{data-explanation="😲 This is the % who think premartial sex is 'always wrong'."}
-   [22.65]{data-explanation="😲 This is the % who think premarital sex is 'always' OR 'almost always wrong'."}
-   [12.20]{data-explanation="😲 This is % who think premarital sex is 'wrong only sometimes'."}

##  {.quiz-question data-menu-title="Knowledge Check" background-image="images/clipboard-question.png" background-size="100px" background-repeat="repeat"}

::: {style="color: #F39C12"}
{{< fa clipboard-question >}} Based on your table, what percentage of
respondents believe sex before marriage is 'always' or 'almost always
wrong'?
:::

-   [22.65]{.correct data-explanation="💯 Correct!"}
-   [16.88]{data-explanation="😲 This is the % who think premartial sex is 'always wrong'."}
-   [5.77]{data-explanation="😲 This is the % who think premarital sex is 'almost always wrong'."}
-   [12.20]{data-explanation="😲 This is % who think premarital sex is 'wrong only sometimes'."}

## Cross-tab

The `table()` function gives us the frequencies.

<br>

```{r}
#| label: crosstab-01

table(gss24$premarsx, gss24$pol3cat)
```

<br>

We want to add the **column** percentages...

## Relative Frequency Cross-tab

```{r}
#| label: crosstab-02
#| code-line-numbers: "1|2|3|4"
#| eval: false

ctable(gss24$premarsx, gss24$pol3cat, # <1>
       prop = "c", # <2>
       format = "p", # <3>
       useNA = "no") # <4>
```

1.  Change from `table()` to `ctable()`.
2.  The "c" gives column %; "r" would give row %.
3.  This adds the % symbols to the table.
4.  Exclude the missing levels from the table.

##  {.smaller data-menu-title="Your Data Take" background-image="images/lightbulb-solid.png" background-size="80px" background-repeat="repeat"}

::: {style="color: #f39c12; font-size: 250%; font-family: 'Shadows Into Light'"}
{{< fa regular lightbulb >}} **What's your conclusion to our initial
research question?**
:::

<br>

\% who think sex relations before marriage is \_\_\_\_\_\_\_\_\_\_, by
political views

```{r}
#| label: crosstab-02-output
#| echo: false

ctable(gss24$premarsx, gss24$pol3cat, prop = "c", format = "p", useNA = "no") 
```



