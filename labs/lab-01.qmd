---
title: "Lab 01"
format:
  revealjs:
    multiplex: true
    controls: true
    theme: [default, custom.scss]
    highlight-style: atom-one
    include-in-header:
    - file: mathjax-color.html
    slide-number: c
    math: mathjax
revealjs-plugins:
  - quiz
embed-resources: true
filters:
    - openlinksinnewpage
editor: 
  markdown: 
    wrap: 72
execute: 
  echo: true
---

```{r echo=FALSE}

#| label: setup
#| message: false
#| include: false

## Load packages, custom functions, and styles
source("custom-setup-styles.R")

# Color in math equations
# https://egallic.fr/Recherche/aide-memoire/quarto_equation_colors.html#colors-in-equations-with-revealjs
```

# Agenda {data-menu-title="Agenda" background-image="images/calendar.png" background-size="100px" background-repeat="repeat"}

-   R & RStudio Workflow
-   Quarto
-   Getting Started

# Learning objectives

By the end of the lab, you will be able to ...

-   setup a reproducible workflow using R and RStudio\
-   familiarize yourself with a dataset using R and RStudio\
-   create a reproducible report using Quarto\


# R & RStudio Workflow {.theme-section}

## Replication

[**The guiding principle for workflow.**]{style="color: #18BC9C"}

A workflow of data analysis is a process for managing all aspects of
data analysis.

<br>

Planning, documenting, and organizing your work; cleaning the data;
creating, renaming, and verifying variables; performing and presenting
statistical analyses; producing replicable results; and archiving what
you have done are all integral parts of your workflow.

::: aside
Source: (Long 2008)
:::

## Steps in a workflow

|  |  |
|-------------------------------|-----------------------------------------|
| **Set up** | Systematic organization of the project and project files. |
| **Familiarize self with data** | Skipping takes more time in the long run. |
| **Process data** | Takes the [**MOST**]{style="color: #e74c3c;"} time. |
| **Running analyses** | What people **THINK** takes the most time. |
| **Presenting results** | What people (wrongly) think does not take time. |

## File types

There are many file types, but these are key to an R & RStudio workflow
(and likely new to you):

::: {style="font-size: 70%"}
| Extension | Description |
|--------------------------|----------------------------------------------|
| .Rproj | RStudio project file (keeps project settings). |
| .R | R scripts store a sequence of R commands (code) that can be run all at once or line by line. |
| .qmd | Quarto Markdown creates reproducible documents that contain a combination of text, code, and output. |
| .Rdata (or sometimes .rda) | These store and load R objects—like data frames. |
:::

## File names

should be:

-   machine-readable
-   human-readable
-   play well with default-ordering

## RStudio projects

<br>

Create a **RStudio project** for each data analysis project.

It supports an organized and reproducible workflow, cleanly separated
from all other projects that you are working on. Everything you need in
one place:

::: {style="font-size: 80%"}
-   local data files to load into RStudio.
-   scripts to edit or run in bits or as a whole.
-   Save your outputs (plots and cleaned data).
:::

::: notes
Source:
<https://docs.posit.co/ide/user/ide/get-started/#hello-rstudio-projects>
:::

## Filepaths {.smaller}

Adopting a project-based workflow avoids changing file paths.

<br>

::::: columns
::: {.column width="60%"}
**ABSOLUTE FILE PATHS**

Department of Sociology\
Unit 17100, 17th Floor, Ontario Power Building\
700 University Ave., Toronto, ON M5G 1Z5

`C:\Users\Pepin\GitHub\SOC6302\scripts`
:::

::: {.column width="40%"}
**RELATIVE FILE PATHS**

Take the left side elevators to the 17th floor.\
Go through the double doors and a take a right.\
First door on your left.

`here`([scripts]{style="color: #18BC9C"})
:::
:::::

## Tour: RStudio Panes {background-image="images/watch.png" background-size="100px" background-repeat="repeat"}

<br>

::: {style="color: #18BC9C; font-size: 300%; font-family: 'Shadows Into Light'"}
Sit back and enjoy the show!
:::

::: notes
-   open R script or Quarto document
-   Environment (data values, functions)
-   Plots, Help, Viewer
-   Console -- typing
:::


## Tour recap: Panes

::::: r-stack
:::: {style="font-size: 80%"}
There are four key regions or “panes” in the interface:

1.  [**Source
    pane:**](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html#source)
    where you can edit and save R scripts or author computational
    documents like Quarto and R Markdown.

2.  [**Console
    pane:**](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html#console)
    is used to write short interactive R commands.

3.  [**Environment
    pane:**](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html#environment-pane)
    displays temporary R objects created during that R session.

4.  [**Output
    pane:**](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html#output-pane)
    displays the plots, tables, or HTML outputs of executed code along
    with files saved to disk.

::: {.callout-tip icon="false"}
## {{< fa pen-to-square >}} Source Pane

The top-left panel and can be launched by opening any editable file in
RStudio.
:::
::::

![](images/01/panes.png){.fragment fragment-index="1"}
:::::

::: notes
Console pane: best for exploring.\
Source pane: best for documenting.
:::

## R-scripts and Quarto

Open RStudio, then click the dropdown arrow next to the "[New File
icon]{style="color: #3498DB"}," and then "[R
script]{style="color: #3498DB"}" or "[Quarto Document]{style="color: #3498DB"}."

![](videos/01/R-script.mp4){width="65%"}

::: aside
Alternatively, hold down "Ctrl" + "Shift" + "N."
:::

::: notes
An R-script is a file that will contain the documentation of the code of
what you tell R to do.
:::



## Blank slate

:::: r-stack
::: {style="font-size: 80%"}
Clear the memory at every restart of RStudio by turning off the
automatic saving of your workspace and .Rdata files with you quit
RStudio. This is important for reproducibility, debugging, and avoiding
littering your computer with unnecessary files.

Set this via:

1.  [Tools \> Global Options]{style="color: #3498DB"}.
2.  [Uncheck “Restore .RData into Workspace at
    Startup”]{style="color: #3498DB"}.
3.  Choose "[Never]{style="color: #3498DB"}" on the “Save workspace to
    .RData on exit”.
4.  Click "[Apply]{style="color: #3498DB"}" and
    "[OK]{style="color: #3498DB"}".
:::

![](images/01/blank-slate.png){.fragment fragment-index="1" width="45%"}
::::

## Comprehensive R Archive Network (CRAN)

CRAN is like an App Store for R. It hosts R packages, documentation, and
source code contributed by users worldwide. It is mediated (e.g.,
quality controlled), making it incredibly reliable.

R users can easily install, update, and share R packages using
`install.packages()`.

## Packages

R comes with basic tools, but **packages** extend the capabilities of
base R (what you already installed). An R package is like a toolbox: a
collection of functions, data, and documentation that help you do
specific tasks using R.

<br>

::: {style="font-size: 70%"}
You'll install each package (only once per system):
:::

```{r}
#| label: install-ex
#| message: false

install.packages("tidyverse")
```

<br>

::: {style="font-size: 70%"}
You'll load each package (every time you use it):
:::

```{r}
#| label: load-ex
#| message: false

library(tidyverse)
```

## Support {background-image="images/file-video-solid.png" background-size="100px" background-repeat="repeat"}

Some help videos and further explanation:

[R - Intro RStudio Interface](https://youtu.be/opy-v0WAHXM)

[EasyR - Getting started with R the easy
way](https://youtu.be/K9-zDmq737I)


# Quarto {.theme-section}

## Quarto

The tool you'll use to create reproducible computational
documents. Every piece of assignment you hand in will be a Quarto
document.

-   Fully reproducible reports
-   R code + narrative

::: notes
You are likely familiar with word processors like MS Word or Google
Docs. We will not be using these in this class. Instead, the words you
would write in such a document, as well as your R code, will go into a
Quarto document. You will *render* the document (more on what this means
later) to get a document out that has your words, code, and the output
of that code. Everything in one place, beautifully formatted!
:::

##  {#slide28-id data-menu-title="RScript vs Quarto"}

::::: columns
::: {.column width="50%"}
### [RScript]{style="color: #18BC9C;"}

great for learning, exploring and tinkering.

rerun it without attention to formatting or markdown.
:::

::: {.column width="50%"}
### [Quarto]{style="color: #18BC9C;"}

great for communicating analysis and results

combines narrative explanation with code output (results.
:::
:::::

## Documentation

::: r-stack
![](images/01/documentation.png)

![](images/01/pound.png){.fragment fragment-index="1"}
:::

::: notes
In .R scripts and Quarto, you can document your code. Err on the side of
over documentation. Your future self will thank you. In .R scripts, the
way to make a comment rather than a command, is to put a pound sign in
front of the text.
:::

## Tour: Quarto {background-image="images/watch.png" background-size="100px" background-repeat="repeat"}

<br>

::: {style="color: #18BC9C; font-size: 300%; font-family: 'Shadows Into Light'"}
Sit back and enjoy the show!
:::

::: notes
-   YAML Ain't Markup Language
-   code chunk (+ code comments)
-   narrative (heading levels)
-   render
-   run (line vs code chunk)
-   source and visual
:::

## Tour recap: Quarto

![](images/01/quarto.png)

::: aside
Source: [Dr. Mine Çetinkaya-Rundel](https://sta199-f24.github.io/slides/01-meet-the-toolkit-slides.html#/tour-recap-quarto)
:::


## How will we use Quarto?

-    Every code-along and milestone will be a Quarto document
-    The scaffolding will decrease over the course
-    You will create and submit a Quarto document for your research project

# Getting Started {.theme-section}

## Create a RStudio Project {#slideRStudioProj-id}

<br>

To create a new project in RStudio, click: [File \> New
Project]{style="color: #3498DB"}.

In the New Project wizard that pops up, select: [New Directory, then New
Project]{style="color: #3498DB"}.

Name the project “[SOC6302]{style="color: #f39c12"}” and click: [Create
Project]{style="color: #3498DB"}.

This will launch you into a new RStudio Project inside a new folder
called “SOC6302”.

## Your first code-along

Download and open [code-along-01.qmd]()


## Packages

We'll use the following packages:

-   `here()` (relative file paths)
-   `tidyverse()` (data wrangling)
-   `gssr()` (U.S. General Social Survey data)
-   `gssrdoc()` (GSS documentation)

## Install `here()` and `tidyverse()`

Let's install the two packages that are available on CRAN.

<br>

Copy and paste the following code into your 
[Console pane]{style="color: #F39C12;"}. Then hit enter.

```{r}
#| eval: false
#| message: false
#| label: install-here


install.packages("here")
```

<br>

Then, do the same to install the tidyverse package.

```{r}
#| eval: false
#| message: false
#| label: install-tidyverse

install.packages("tidyverse")
```

## Install `gssr()` and `gssrdoc()`

```{r}
#| eval: false
#| message: false
#| label: install-gss

# Install 'gssr' from 'ropensci' universe
install.packages('gssr', repos =
  c('https://kjhealy.r-universe.dev', 'https://cloud.r-project.org'))

# Also recommended: install 'gssrdoc' as well
install.packages('gssrdoc', repos =
  c('https://kjhealy.r-universe.dev', 'https://cloud.r-project.org'))
```

::: {.callout-tip icon="false"}
## {{< fa pen-to-square >}}
R ignores text after #. These comments describe syntax.
:::

## Load the packages

```{r}
#| message: false
#| label: load

library(here)
library(tidyverse)
library(gssr)
library(gssrdoc)
```

## Environment

```{r}
#| message: false
#| label: enviro

# software documentation
sessionInfo()

```


## Project structure

Let's set up your project structure using the `here()` package.

![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/here.png)

## `here()`

First, let's establish our project directory

```{r}
#| eval: false
#| message: false
#| label: here

# set the file path to the root of the project
here()

```

<br>

Next, we'll create folders within our project.  

## Example folder structure {.smaller}

::::: columns
:::: {.column width="60%"}
**Research Projects**

<div class="file-tree">
  <details open>
    <summary>project/</summary>

    <details>
      <summary>data/</summary>
      <div>gss7924-raw.rda</div>
      <div>gss7924-processed.Rdata/</div>
    </details>

    <details>
      <summary>scripts/</summary>
      <div>clean_data.R</div>
      <div>analyze_data.R</div>
      <div>draft.qmd</div>
    </details>

    <details>
      <summary>outputs/</summary>
        <div>draft.html</div>
      <details>
        <summary>figures/</summary>
        <div>plot1.png</div>
        <div>plot2.png</div>
      </details>
    </details>

    <div>readme.qmd</div>
    <div>project.Rproj</div>
  </details>
</div>

::::

:::: {.column width="40%"}
**SOC6302**

<div class="file-tree">
  <details open>
    <summary>SOC6302/</summary>

    <details>
      <summary>data/</summary>
      <div>gss7924-raw.rda</div>
      <div>gss7924-processed.Rdata/</div>
    </details>
    
    <details>
      <summary>code-alongs/</summary>
    </details>
    
    <details>
      <summary>milestones/</summary>
    </details>

    <details>
      <summary>project/</summary>
        <details>
          <summary>data/</summary>
        </details>
        <details>
          <summary>scripts/</summary>
        </details>
        <details>
          <summary>outputs/</summary>
        </details>
    </details>

    <div>readme.qmd</div>
    <div>SOC6302.Rproj</div>

  </details>
</div>


::::
:::::

## Create a folder structure 
using `here()` and `dir.create()`

```{r}
#| eval: false
#| message: false
#| label: base-folders

# Create base folders
dir.create(here("data"), recursive = TRUE)
dir.create(here("code-alongs"), recursive = TRUE)
dir.create(here("milestones"), recursive = TRUE)
dir.create(here("project"), recursive = TRUE)
```

## Create sub-folders
using `here()` and `dir.create()`

```{r}
#| eval: false
#| message: false
#| label: sub-folders

# Create project sub-folders
dir.create(here("project", "data"), recursive = TRUE)
dir.create(here("project", "scripts"), recursive = TRUE)
dir.create(here("project", "outputs"), recursive = TRUE)

```


## Check your work
report a list of folders and or files in the R-project folders and sub-folder.

```{r}
#| eval: false
#| message: false
#| label: list-files

# Your SOC6302 class folder
list.files(path = here())

# Your "Project" sub-folder
list.files(path = here("project"))

```

## Save code-along 

<br>

Save this code-along in your newly created "code-along" sub-folder.  
  
<br>  

There's no command in the R console to save scripts or Quarto files— 
you use the editor's [File]{style="color: #3498DB"} > 
[Save As]{style="color: #3498DB"} or Ctrl+S.

##  Meet your data

:::: columns
::: {.column width="50%"}
![](images/01/meet.png)
:::

::: {.column width="50%"}
We're going to use data from the 
[U.S. General Social Survey (GSS)](https://gss.norc.org/us/en/gss/about-the-gss.html). 
:::
::::


## Load your data

```{r}
#| label: gssdata

# Load the data (will appear in your Global Environment pane)
data(gss_all)

# Preview the datatable which is automatically named gss_all
gss_all

```

::: notes
A “tibble” is another name for “tidy dataset,” 
meaning that the data is organized in structured, clear rows and columns. 
“(75,699 × 6,867)” means the dataset contains 75,699 rows and 6,867 columns. 
Commonly, in social sciences, rows are referred to as “observations” and 
columns as “variables.” 
In our case, there are 75,699 observations (e.g., respondents) 
and 6,867 variables.
:::

## Load GSS 2024

```{r}
#| label: gss24

# Get the data only for the 2024 survey respondents
gss24 <- gss_get_yr(2024)

# look at the first 6 rows of the dataframe
head(gss24)

```

## Browse dataframe

With your mouse, go to the environment panel (upper-right) and click on the 
“gss24” object. It pops up and you can browse through it.  

<br>

This is often a good idea to get a first feel for the data, but only if your 
dataset is relatively small.

##  {data-menu-title="Why use codebooks"}

![](images/01/caution.png)

::: notes
Author Naomi Wolf wrote a book about the treatment of homosexuality in 19th 
century England. She reported that it was punishable by death since “sodomy” 
charges were followed by “death recorded” in the judicial logs. However, 
“sodomy” referred to a host of other sexual offenses, and “death recorded” 
specifically means they weren’t killed because their death was recorded but not 
carried out.  
  
Paul Dolan wrote a book about how marriage makes you miserable. A key part of 
his evidence was that in the American Time Use Survey, married people surveyed 
about their happiness when the spouse was present reported being happy, but when 
the spouse was absent they reported being unhappy. Covering up unhappiness in 
front of their spouse, truly miserable! But while Dolan read spouse 
present/absent as “spouse is in the room during questioning”, 
it actually meant “spouse together/separated.” He was comparing couples that 
were together vs. couples that were separating!

:::

## Codebook

The [GSS documentation](https://gss.norc.org/us/en/gss/get-documentation.html) 
is available online in .pdf form.  

The .pdfs will be useful for general overviews.  

<br>
  
For specific variable information, it will be helpful to use the documentation
you'll load into RStudio.  

```{r}
#| label: gsscodebook

# Load the codebook
data(gss_dict)

```


## Names

To see the variables available in the dataset, use the `names()` command.

```{r}
#| eval: false
#| message: false
#| label: names

names(gss_all)
```


<br> 

::: {.callout-tip icon="false"}
## {{< fa pen-to-square >}}
This command is best to use with smaller datasets. 
:::

## Variable documentation

For information about a specific GSS variable,  
type `?varname` at the console.

<br>

In the output pane, the Help tab will show the variable documentation.

<br>

::: {.callout-tip icon="false"}
## {{< fa pen-to-square >}}
Replace "varname" with the name of a variable.  
Example: `?meovrwrk`
:::

## Variable documentation example

```{r}
#| echo: false
#| message: false
#| label: meovrwrk-help

cat(readLines("images/01/meovrwrk.txt"), sep = "\n")
```


::: notes
Variable name: meovrwrk  
Variable label: Men hurt family when focus on work too much  
1994 was the first year of the survey.  
695 respondents agreed with the statement.  
iap -- missing. 
Values:  the numeric and response category key (1 = strongly agree)
:::


## {data-menu-title="Variable documentation example cont."}

We can find this which years one or more variables were asked with `gss_which_years()`.

:::::: columns
:::: column

```{r}
#| label: which-years

gss_which_years(gss_all, meovrwrk)

```

::::

:::: column
::: {.callout-tip icon="false"}
## {{< fa pen-to-square >}} **TIP**
If run in the console, to see all rows, 
wrap the code in the `print()` command:
`print(gss_which_years(gss_all, fefam), n = 40)`
:::
::::

::::::

## Variables

You can access the variables (i.e., columns) using the `$` operator, 
as shown using the `table()` function

<br>

The variable names are case sensitive. 
In this dataset, all variables are lowercase.  

  
```{r}
#| label: meovrwrk-table

table(gss_all$meovrwrk)
```

::: {style="color: #E74C3C; font-size: 90%; font-family: 'Shadows Into Light'"}
2436 respondents were coded as `1` on this variable. What does that mean? 
:::


## Cross-tabs

The table command also let's you create a table with two variables.

```{r}
#| label: crosstab

# 1st variable is the rows, 2nd variable is the columns.
table(gss_all$year, gss_all$meovrwrk)

```

