---
title: "Milestone 02"
format: pdf
---

# Environment

Update the YAML with your first and last name.

Update the YAML with your first and last name.

Load the packages from the code-along. (Install first if not already
done so.)

```{r}
#| label: load
#| message: false

library(here)
library(tidyverse) 
library(haven) 
library(gssr)
library(gssrdoc)
library(summarytools)
```

Load the 2024 General Social Survey data

```{r}
#| label: gss-data

# load the gss 2024 data (add your code below)
gss24 <- gss_get_yr(2024)

# Use here() to construct the file path of the panel data
gss_panel.dta <- here("data", "GSS_2020_panel_stata_1a/gss2020panel_r1a.dta")

#load the panel data using `haven::read_dta()`
gss_panel <- read_dta(gss_panel.dta)

```

You’ll be working with the following GSS variables:

-   `hrs1`: Hours worked per week
-   `tvhours`: Hours spent watching TV per day
-   `sex`: Respondent’s gender
-   `polviews`: Political views (from extremely liberal to extremely conservative)


# Do Stuff in R

For **tasks 1-6** use the 2024 GSS data. For **tasks 7-10**, use the panel data.

## Task 01: Select Relevant Variables

Use `select()` to create a new data frame with only the four variables listed above.

```{r}
#| label: select

my_data <- gss24 |>
  select(hrs1, tvhours, sex, polviews) 

```

## Task 02: Make clean categorical variables factors

Use `zap_missing`, `as_factor`, and `droplevels` to make `sex` into a factor variable.

```{r}
#| label: sex-01
#| 
my_data$sex <- zap_missing(my_data$sex)
my_data$sex <- as_factor(my_data$sex)
my_data$sex <- droplevels(my_data$sex)
```

## Task 03: Create New Variables

Use `mutate()` and `case_when()` to create a new variable called `work_category` that groups respondents as follows:

-   "Not working" if hrs1 == 0
-   "Part-time" if hrs1 is between 1 and 34
-   "Full-time" if hrs1 is 35 or more

```{r}
#| label: work_category

my_data <- my_data %>%
  mutate(
    work_category = case_when(
      hrs1 == 0 ~ "Not working",
      hrs1 >= 1 & hrs1 <= 34 ~ "Part-time",
      hrs1 >= 35 ~ "Full-time"
  ))
```


Use `mutate()` and `case_when()` to create a new variable called `pol3cat` that groups respondents as follows:

-   "Liberal" if polviews equals "extremely liberal", "liberal", or "slightly liberal"
-   "Moderate" if polviews equals "moderate, middle of the road"
-   "Conservative" if polviews equals "extremely conservative", "conservative", "slightly conservative"

```{r}
#| label: pol3cat

my_data <- my_data %>%
  mutate(
    pol3cat = case_when(
      polviews >= 1 & polviews <= 3 ~ "Liberal",
      polviews == 4 ~ "Moderate",
      polviews >= 5 & polviews <= 7 ~ "Conservative"
  )) 

```


## Task 04: Filter the Data

Use `drop_na()` to keep only respondents who have non-missing values for all variables.

```{r}
#| label: drop-na

my_data <- my_data %>%
  drop_na()

```
  
## Task 05: Summarize work and tv hours by political identity

Use `group_by()` and `sumamrize()` to create a table showing the frequency, mean, median, and sd of `hrs1` for each of the three political identity groups.

```{r}
#| label: table-01

my_data |>
  group_by(pol3cat) |>  
  summarise(
    count = n(),
    mean_hrs1 = round(mean(hrs1), digits = 2), 
    median_hrs1 = round(median(hrs1)),
    sd_hrs1 = round(sd(hrs1), digits = 2)
    ) 
```


Use `group_by()` and `sumamrize()` to create a table showing the frequency, mean, median, and sd of `tvhours` for each of the three political identity groups.

```{r}
#| label: table-02

my_data |>
  group_by(pol3cat) |>  
  summarise(
    count = n(),
    mean_tvhours = round(mean(tvhours), digits = 2), 
    median_tvhours = round(median(tvhours)),
    sd_tvhours = round(sd(tvhours), digits = 2)
    ) 
```
    
    
## Task 06: Create a summary dataframe

Use `group_by()` and `summarise()` to create and save a dataframe showing the average work and tv hours for men and women in 2024.

```{r}
#| label: summary

my_data_summary <- my_data |>
  group_by(sex) |>  
  summarise(
    avg_hrs1 = round(mean(hrs1), digits = 2), 
    avg_tvhours = round(mean(tvhours), digits = 2)
    )
```


## Task 07: Reshape panel data so it is tidy

```{r}
#| label: tidy-data

my_gss_panel <- gss_panel |>
    select(yearid, 
         starts_with("sex_"), 
         starts_with("hrs1_"),
         starts_with("tvhours_")) |>
    pivot_longer(
    cols = 2:10,
    names_to = "variable", 
    values_to = "value") |>
    separate_wider_delim(variable, 
                       delim = "_", 
                       names = c("variable", "panel")) |>
  pivot_wider( 
    names_from = variable, 
    values_from = value) |> 
  relocate(panel, .after = yearid) |>
  drop_na()
```

## Task 08: Recode panel variables

Use `zap_missing`, `as_factor`, and `droplevels` to make `sex` into a factor variable.

```{r}
#| label: sex-02

my_gss_panel$sex <- zap_missing(my_gss_panel$sex)
my_gss_panel$sex <- as_factor(my_gss_panel$sex)
my_gss_panel$sex <- droplevels(my_gss_panel$sex)
```

Use `mutate()` and `case_when()` to re-code the `panel` variable so that "1a" = 2016, "1b" = 2018, and "2" = 2020.

```{r}
#| label: recode

my_gss_panel <- my_gss_panel |>
  mutate(panel = case_when(
         panel == "1a" ~ 2016,
         panel == "1b" ~ 2018,
         panel == "2" ~ 2020,
         TRUE ~ NA_integer_),
         sex = as_factor(sex))
```

## Task 09: Join panel data with 2024 summary data

Use `full_join()` to merge the panel data with your created 2024 summary data.

```{r}
#| label: join

my_data_all <- full_join(my_data_summary, my_gss_panel, by = "sex")
```

## Task 10: Create a summary tables

Use `group_by()` and `summarise()` to look at a table showing the average work hours for men and women for each panel year.

```{r}
#| label: summary-panel-hrs1

my_data_all |>
  group_by(sex, panel) |>
    summarise(
    count = n(),
    mean_hrs1 = round(mean(hrs1), digits = 2), 
    median_hrs1 = round(median(hrs1)),
    sd_hrs1 = round(sd(hrs1), digits = 2)
    ) 

```

Use `group_by()` and `summarise()` to look at a table showing the average tv hours for men and women for each panel year.

```{r}
#| label: summary-panel-tvhours

my_data_all |>
  group_by(sex, panel) |>
    summarise(
    count = n(),
    mean_tv = round(mean(tvhours), digits = 2), 
    median_tv = round(median(tvhours)),
    sd_hrs1 = round(sd(tvhours), digits = 2)
    ) 

```

Run the following code to add status variables to your dataset.

```{r}
#| label: status-vars

my_data_all <- my_data_all |>
  group_by(sex, panel) |>
  mutate(
    work_status = ifelse(hrs1 > avg_hrs1, "Above 2024 average", "Below 2024 average"),
    tv_status = ifelse(tvhours > avg_tvhours, "Above 2024 average", "Below 2024 average")
  )
```





# Evaluate Based on Output

## Question 01
In 2024, which political group watched the most television, on average?

## Question 02
In 2024, which political group reported the most work hours, on average?

## Question 03
In 2024, is the median value for `tvhours` consistent with the mean? What might explain any differences?

## Question 04
In 2024, did men or women report more average work hours? TV hours?

## Question 05
Has the average number of hours spent watching TV increased or decreased from 2016 to 2020?

## Question 06
Do men and women differ in their average TV viewing or work hours across these years?

## Question 07
How do the 2024 averages compare to the trends observed in earlier years?



....


Run the following code to produce a table comparing work & tv hours in 2016, 2018, and 2020 with the 2024 averages. Then answer the following questions.

```{r}
#| label: table-compare

my_data_all |>
  group_by(sex, panel) |>
  summarize(
    prop_above_2024_work = round(mean(work_status == "Above 2024 average"), digits = 2),
    prop_above_2024_tv = round(mean(tv_status == "Above 2024 average"), digits = 2)
  )


```


## Question 08
What proportion of men worked more hours in 2016 than the 2024 average? What about women?

## Question 09 
What proportion of men watched more television in 2020 than the 2024 average? What about women?

## Question 10
Speculate about whether there is evidence of a post-pandemic shift in work or tv time. 
Use any of the summary statistics and tables you've already produced to justify your answer (no need to make it more complicated).



# IPUMS Data

<file:///C:/Users/Joanna/AppData/Local/Temp/ipumsr10-12-21.pdf>
