---
title: "Data Management II"
format:
  revealjs:
    multiplex: false
    controls: true
    theme: [default, custom.scss]
    highlight-style: atom-one
    include-in-header:
    - file: mathjax-color.html
    slide-number: c
    math: mathjax
    code-annotations: hover
revealjs-plugins:
  - quiz
embed-resources: true
filters:
    - openlinksinnewpage
editor: 
  markdown: 
    wrap: 72
execute: 
  echo: true
---

```{r echo=FALSE}

#| label: setup
#| message: false
#| include: false

## Load packages, custom functions, and styles
source("custom-setup-styles.R")

# Color in math equations
# https://egallic.fr/Recherche/aide-memoire/quarto_equation_colors.html#colors-in-equations-with-revealjs
```

# Agenda {data-menu-title="Agenda" background-image="images/calendar.png" background-size="100px" background-repeat="repeat"}

-   Manipulating Dataframes
-   Joining Dataframes

::: notes
joining data
missing data? & **outliers** - dates? - lists
:::

# Learning objectives

By the end of the lecture, you will be able to ...

-   Reshape data between wide and long formats 
-   Reorder columns and rows
-   Combine and expand dataframes

# Code-along 04 {data-menu-title="Code-along" background-image="images/terminal.png"}

Download and open [code-along-04.qmd](https://app.filen.io/#/d/afda8653-d7df-4d93-8b63-2b9074a4e0f5%23eVHbd4BwtAD9hBnhDzO0rXcAjBQACJLW)

## Packages {.sparse-slide}

Load the standard packages.

```{r}
#| message: false
#| label: load

library(here)
library(tidyverse) 
library(haven) # not core tidyverse
library(gssr)
library(gssrdoc)
library(summarytools)
```

## GSS Panel Data: Download

<https://gss.norc.org/get-the-data/stata>

<br>

![](images/04/gss-panel.png){width="100%"}

::: {.callout-tip icon="false"}
## {{< fa hat-wizard >}} Heads Up!

Save the **unzipped** file in your class `data` folder.
:::

## GSS Panel Data: Load {.sparse-slide}

```{r}
#| message: false
#| label: gsspanel-01

# Use here() to construct the file path
gss_panel.dta <- here("data", "GSS_2020_panel_stata_1a/gss2020panel_r1a.dta")

#load the data using `haven::read_dta()`
data <- read_dta(gss_panel.dta)

# Or, do both at the same time!
# data <- read_dta(here("data", "GSS_2020_panel_stata_1a/gss2020panel_r1a.dta"))

```

## GSS 2016-2020 Panel Dataset {.sparse-slide}

Study of former 2016 and 2018 GSS respondents were interviewed again in
2020

-   Variables from 2016 (Wave 1a) have [**\_1a**]{style="color: #e74c3c"} appended
-   Variables from 2018 (Wave 1b) have [**\_1b**]{style="color: #e74c3c"} appended
-   Variables from 2020 (Wave 2) have [**\_2**]{style="color: #e74c3c"} appended

## GSS 2016-2020 Panel Dataset {.sparse-slide}

```{r}
#| label: gsspanel-02
#| echo: false

set.seed(815)  # Ensures you get the same sample every time

data |>
  select(yearid, starts_with("year_"), starts_with("age_")) |>
  slice_sample(n = 10) 
```

# Manipulating Dataframes {.theme-section}

## Selection helpers {.smaller}

Match variables according to a given pattern.

-    `starts_with()`: Starts with an exact prefix.
-    `ends_with()`: Ends with an exact suffix.
-    `contains()`: Contains a literal string.
-    ...

```{r}
#| label: starts-with-01
#| eval: false

my_data <- data |>
  select(yearid, wtssnr_2, 
         starts_with("age_"), 
         starts_with("family16_"),
         starts_with("socfrend_"),
         starts_with("childs_")) 

```

<br>

. . . 

```{r}
#| label: starts-with-02
#| code-line-numbers: "4|7"

# You can supply multiple prefixes or suffixes.
my_data <- data |>
  select(yearid, wtssnr_2, 
         starts_with(c("age_", "family16_", "socfrend", "childs"))
         )

my_data <- as_factor(my_data) # Apply labels to data

```


## `head()` & `tail()` {.smaller}

Look at the first few column names and **first** few rows.

```{r}
#| label: head
head(my_data, n = 5)
```

<br>

. . .

Look at the first few column names and **last** few rows.

```{r}
#| label: tail
tail(my_data, n = 5)
```

## Reminder: Tidy data

![](images/04/tidy-data.png){width="100%"}

##  {data-menu-title="Not tidy data" }

![](images/04/not-tidy.png){width="100%"}

. . .

::: {style="color: #e74c3c; font-family: 'Shadows Into Light'"}
**This data is NOT tidy!**  
Some column names include values of a variable (survey year). 
:::


##  {data-menu-title="Tidy data" }

```{r}
#| label: tidy
#| echo: false

my_data |>
  pivot_longer(
    cols = c(-yearid, -wtssnr_2),
    names_to = c("variable"),
    values_to = "value") |>
    separate_wider_delim(variable, 
                         delim = "_", 
                         names = c("variable", "panel")) |>
  pivot_wider(
    names_from = variable,
    values_from = value)

```

<br> 

::: {style="color: #18bc9c; font-family: 'Shadows Into Light'"}
**This data is tidy!**  
Each variable in its own column, and each observation in its own row. 
:::

## {data-menu-title="Reshaping"}

![](images/04/wide-long.png){width="100%"}

## `pivot_longer()`

```{r}
#| label: pivot-longer
#| code-line-numbers: "2|3|4|5"

my_data_long <- my_data |>
  pivot_longer(
    cols = 3:14, # <1>
    names_to = "variable", # <2>
    values_to = "value") # <3>

head(my_data_long, n = 5)
```

1.  `cols =` specifies which columns you want to turn into one
2.  `names_to =` defines the name of the new variable containing the current variable names
3.  `values_to=` defines the name of the new variable that takes in the values of the variables

. . . 

::: {style="color: #e74c3c; font-family: 'Shadows Into Light'"}
**This is also not tidy data!**  
The `variable` column contains the variable names & the panel ID.
:::

## `separate()`

```{r}
#| label: separate
#| code-line-numbers: "6|7|8"

my_data_long <- my_data |>
  pivot_longer(
    cols = c(-yearid, -wtssnr_2),
    names_to = "variable",
    values_to = "value") |>
  separate_wider_delim(variable, # <1>
                       delim = "_", # <2>
                       names = c("variable", "panel")) # <3>

head(my_data_long, n = 5)

```

1.  Split the column `variable` into two using a delimiter
2.  A string giving the delimiter between values
3.  `names` specifies the two new column names

. . .

::: {style="color: #e74c3c; font-family: 'Shadows Into Light'"}
**This is still not tidy data!**  
The `value` variable is a mix of different types of values
:::

## `pivot_wider()`

```{r}
#| label: wider
#| code-line-numbers: "1|9|10|11"

my_data <- my_data |> # overwriting my_data
  pivot_longer(
    cols = c(-yearid, -wtssnr_2),
    names_to = "variable",
    values_to = "value") |>
    separate_wider_delim(variable, 
                         delim = "_", 
                         names = c("variable", "panel")) |>
  pivot_wider( # <1>
    names_from = variable, # <2>
    values_from = value) # <3>

head(my_data, n = 5)

```

1.  Increasing the number of columns and decreasing the number of rows
2.  Which column to get the name of the output columns
3.  Which column to get the cell values from

## Recode the reshaped variable

```{r}
#| label: recode-panel

my_data <- my_data |>
  mutate(panel = case_when(
         panel == "1a" ~ 2016,
         panel == "1b" ~ 2018,
         panel == "2" ~ 2020,
         TRUE ~ NA_integer_))

head(my_data, n = 3)
```

. . . 

::: {.callout-tip icon="false"}
## {{< fa hat-wizard >}} Heads Up!

`family16` is a time-invariant variable.
:::

## `relocate()`

```{r}
#| label: relocate-01

my_data <- my_data |> 
  relocate(panel)

head(my_data, n = 2)
```

<br>

. . . 

```{r}
#| label: relocate-02

my_data <- my_data |> 
  relocate(panel, .after = yearid)

head(my_data, n = 2)
```

## `arrange()` {.smaller}

```{r}
#| label: arrange-01
#| output-location: column


my_data |> 
  arrange(panel) |>
  select(yearid, panel, age, family16)

```

<br> 

. . .

```{r}
#| label: arrange-02
#| output-location: column

my_data |> 
  arrange(desc(panel)) |>
  select(yearid, panel, age, family16)

```


# Joining Dataframes {.theme-section}

## appending v.s. merging {.sparse-slide}

::: {.callout-note icon="false"}
## {{< fa pen-to-square >}} APPEND
add new observations (rows) to existing variables
:::

<br>

::: {.callout-note icon="false"}
## {{< fa pen-to-square >}} MERGE
add new variables (columns) to existing observations
(many merge types)
:::

## appending v.s. merging {.sparse-slide}

![](images/04/append-merge.png){width="100%"}

## Example datasets {.sparse-slide}

:::: columns

::: column
**dataframe 1**

```{r}
#| label: df1
#| echo: false

# Create the example dataframes
df_partner1 <- data.frame(
  coupleid = c(2, 1, 3),
  name = c("John", "Megan", "Bin"),
  age = c(42, 36, 38)
)

df_partner1
```
:::

::: column
**dataframe 2**

```{r}
#| label: df2
#| echo: false

df_partner2 <- data.frame(
  coupleid = c(1, 3, 2),
  name = c("Sue", "Ye-jin", "Chrissy"),
  age = c(40, 39, 35)
)
df_partner2
```
:::
::::

<br>

**dataframe 3**

```{r}
#| label: df4
#| echo: false

df_family <- data.frame(
  coupleid = c(3, 1, 2),
  marstat = c(1, 0, 1),
  numchild = c(1, 0, 4),
  country = c("S.Korea", "US", "US")
)
df_family
```


## append data with `bind_rows()` {.sparse-slide}

```{r}
#| label: append

df_all <- bind_rows(df_partner1, df_partner2)

tibble(df_all)
```

## merge data with joins {.sparse-slide}

add columns from `df1` to `df2`, matching observations based on the keys

-    `left_join()` keeps all observations in `df1`.
-    `right_join()` keeps all observations in `df2`.
-    `full_join()` keeps all observations in `df1` and `df2`.
-    `inner_join()` only keeps observations from `df1` that have a matching key in `df2`

## merge data with `left_join()` {.sparse-slide}

```{r}
#| label: join

df_couples <- left_join(df_partner1, df_family, by = "coupleid")

tibble(df_couples)
```


# Think Like a Statistician {background-image="images/lightbulb-solid.png" background-size="80px" background-repeat="repeat"}

Are married people above or below average in internet use or income? Does it vary by survey year?

<br>

[{{< fa regular lightbulb >}} **How do we find
out?**]{style="color: #F39C12; font-size: 175%; font-family: 'Shadows Into Light'"}



## {data-menu-title="Think Like a Statistician" background-image="images/lightbulb-solid.png" background-size="80px" background-repeat="repeat"}

Answering this research question takes a few steps. But, the first step is to create a dataframe with all the necessary information.

[{{< fa regular lightbulb >}} **Can you reproduce this table?**]{style="color: #F39C12; font-size: 175%; font-family: 'Shadows Into Light'"}

<br>

```{r}
#| label: think-output
#| echo: false

# Reshape data
think_data <- data |>
    select(yearid, 
         starts_with("marital_"), 
         starts_with("wwwhr_"),
         starts_with("realrinc_")) |>
    pivot_longer(
    cols = 2:10,
    names_to = "variable", 
    values_to = "value") |>
    separate_wider_delim(variable, 
                       delim = "_", 
                       names = c("variable", "panel")) |>
  pivot_wider( 
    names_from = variable, 
    values_from = value) |> 
  relocate(panel, .after = yearid)

# recode variables
think_data <- think_data |>
  mutate(panel = case_when(
         panel == "1a" ~ 2016,
         panel == "1b" ~ 2018,
         panel == "2" ~ 2020,
         TRUE ~ NA_integer_),
         marital = as_factor(marital))

## summarize by panel
think_summary <- think_data |>
  drop_na(wwwhr, realrinc)  |>
  group_by(panel) |>  
  summarise(
    avg_www = round(mean(wwwhr), digits = 2), 
    avg_inc = round(mean(realrinc), digits = 2)
    )

think_full <- full_join(think_data, think_summary, by = "panel")

think_full

```


## {.smaller data-menu-title="Your Data Take" background-image="images/lightbulb-solid.png" background-size="80px" background-repeat="repeat"}

::: {style="color: #f39c12; font-size: 175%; font-family: 'Shadows Into Light'"}
{{< fa regular lightbulb >}} **What's your conclusion to our research question?**
:::

```{r}
#| label: think-answer
#| echo: false

# Filter for married individuals and create flags
think_married <- think_full |>
  filter(marital == "married") |>
  group_by(panel) |>
  mutate(
    income_status = ifelse(realrinc > avg_inc, "Above Average", "Below Average"),
    internet_status = ifelse(wwwhr > avg_www, "Above Average", "Below Average")
  )
```

```{r}
#| label: think-answer-01

# Income status
ctable(think_married$income_status, think_married$panel, 
  prop = "c", 
  format = "p", 
  useNA = "no",
  headings = FALSE
)

```


```{r}
#| label: think-answer-02

# Internet status
ctable(think_married$internet_status, think_married$panel, 
  prop = "c", 
  format = "p", 
  useNA = "no",
  headings = FALSE
)
```
